// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id // Azure AD subject ID
  email     String   @unique
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdProjects Project[]       @relation("ProjectCreator")
  projectMembers  ProjectMember[]
  assignedTasks   Task[]          @relation("TaskAssignee")
  createdTasks    Task[]          @relation("TaskCreator")
  comments        Comment[]
  uploads         TaskAttachment[]

  @@map("users")
}

model Project {
  id          String    @id @default(uuid())
  name        String
  description String?
  status      String // PLANNING, IN_PROGRESS, ON_HOLD, COMPLETED, CANCELLED
  startDate   DateTime?
  endDate     DateTime?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  creator   User           @relation("ProjectCreator", fields: [createdBy], references: [id])
  members   ProjectMember[]
  tasks     Task[]

  @@map("projects")
}

model ProjectMember {
  projectId String
  userId    String
  role      String // ADMIN, PROJECT_MANAGER, MEMBER
  joinedAt  DateTime @default(now())

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_members")
}

model Task {
  id             String    @id @default(uuid())
  projectId      String
  title          String
  description    String?
  status         String // TODO, IN_PROGRESS, IN_REVIEW, DONE
  priority       String // LOW, MEDIUM, HIGH
  assignedTo     String?
  dueDate        DateTime?
  estimatedHours Decimal?  @db.Decimal(5, 2)
  actualHours    Decimal?  @db.Decimal(5, 2)
  createdBy      String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  project          Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee         User?             @relation("TaskAssignee", fields: [assignedTo], references: [id])
  creator          User              @relation("TaskCreator", fields: [createdBy], references: [id])
  comments         Comment[]
  attachments      TaskAttachment[]
  dependentOn      TaskDependency[]  @relation("DependentTask")
  dependencyFor    TaskDependency[]  @relation("DependencyTask")

  @@map("tasks")
}

model TaskDependency {
  dependentTaskId  String
  dependencyTaskId String
  createdAt        DateTime @default(now())

  // Relations
  dependentTask    Task     @relation("DependentTask", fields: [dependentTaskId], references: [id], onDelete: Cascade)
  dependencyTask   Task     @relation("DependencyTask", fields: [dependencyTaskId], references: [id], onDelete: Cascade)

  @@id([dependentTaskId, dependencyTaskId])
  @@map("task_dependencies")
}

model Comment {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model TaskAttachment {
  id         String   @id @default(uuid())
  taskId     String
  fileName   String
  filePath   String
  fileSize   BigInt
  uploadedBy String
  createdAt  DateTime @default(now())

  // Relations
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [uploadedBy], references: [id])

  @@map("task_attachments")
}
